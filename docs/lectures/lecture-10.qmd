---
pagetitle: "ETC5523: Communicating with Data"
subtitle: "Narrative"
author: "Michael Lydeamore"
email: "michael.lydeamore@monash.edu"
date: "Week 10"
department: "Department of Econometrics and Business Statistics"
unit-url: "cwd.numbat.space"
footer: "ETC5523 Week 10"
format: 
  revealjs:
    logo: images/monash-one-line-black-rgb.png
    slide-number: c
    multiplex: false
    theme: assets/monash.scss
    show-slide-number: all
    show-notes: true
    controls: true
    width: 1280
    height: 720
    css: [assets/tachyons-addon.css, assets/custom.css]
    include-after-body: "assets/after-body.html"
    incremental: true
    self-contained: true
execute:
  echo: true
---

```{r, include = FALSE}
current_file <- knitr::current_input()
basename <- gsub(".[Rq]md$", "", current_file)
library(tidyverse)
library(gganimate)
knitr::opts_chunk$set(
    fig.path = sprintf("images/%s/", basename),
    fig.width = 6,
    fig.height = 4,
    fig.align = "center",
    out.width = "100%",
    fig.retina = 3,
    echo = FALSE,
    warning = FALSE,
    message = FALSE,
    cache = TRUE,
    cache.path = "cache/"
)
theme_set(theme_bw(base_size = 18))
```

## <br>[`r rmarkdown::metadata$pagetitle`]{.monash-blue} {#etc5523-title background-image="images/bg-01.png"}

### `r rmarkdown::metadata$subtitle`

Lecturer: *`r rmarkdown::metadata$author`*

`r rmarkdown::metadata$department`

::: tl
<br>

<ul class="fa-ul">

<li>

[<i class="fas fa-envelope"></i>]{.fa-li}`r rmarkdown::metadata$email`

</li>

<li>

[<i class="fas fa-calendar-alt"></i>]{.fa-li} `r rmarkdown::metadata$date`

</li>

<li>

[<i class="fa-solid fa-globe"></i>]{.fa-li}<a href="`r rmarkdown::metadata[["unit-url"]]`">`r rmarkdown::metadata[["unit-url"]]`</a>

</li>

</ul>

<br>
:::


## {#aim}

::: {.callout-important }

## Aim

* Compose effective data stories by:
  - identifying the goals, 
  - selecting appropriate data, visualisations and aesthetic designs, and 
  - receiving feedback.
* Understand and apply narrative structures and techniques to enhance communication with data

:::




## Recall: Communication is a [process]{.monash-blue}


Transactional communication model

<center>
<img src="images/drawn/transactional-communication-model.png" width="70%">
</center>

## Communication problems

. . . 

**_The technical problem_**

How    accurately    can    the    symbols    of    communication    be transmitted?

. . . 

**_The semantic problem_**

How  precisely  do  the  transmitted  symbols  convey  the  desired meaning?

. . . 

**_The effectiveness problem_**

How effectively does the received meaning affect conduct in the desired way?


::: aside 

Jones (2014) Communicating Data with Tableau

:::

## [Principles]{.monash-blue} of Communicating Data

1. Know your goal (target audience, intended message, desired effect)
2. Use the right data
3. Select suitable visualisations
4. Design for aesthetics
5. Choose an effective medium and channel
6. Check the results, i.e. get **feedback**

::: aside 

Jones (2014) Communicating Data with Tableau

:::


## Recall: Communicating with Data


<center>

<img src="images/drawn/venn-diagram.png" height="600px"/>

</center>

## Recall: [Rhetorics]{.monash-blue}

* The art of effective or persuasive speaking or writing

. . . 

::: flex

::: w-50

**Rhetorical triangle**


<img src="images/drawn/rhetorical-triangle.png" width="80%">


:::

::: w-50

**Rhetorical situation**

* Writer or Speaker
* Purpose
* Message
* Audience
* Context

:::


:::


## {}

<br><br>

::: blockquote

No one ever made a decision because of a number. They need a story.

[-- Daniel Kahneman]{.fr}
:::



# [[Basic Story Types](https://www.ipl.org/div/farq/plotFARQ.html)]{.monash-white} {background-color="#006DAE"}



## One Story Type

::: {.r-fit-text .fragment}

Conflict

:::

::: aside

Foster-Harris, William (1959) The Basic Patterns of Plot. 

:::

## Seven Story Types


1. Overcoming the monster
2. Rags to riches
3. The quest
4. Voyage and return
5. Comedy
6. Tragedy
7. Rebirth


::: aside

Booker, Christopher (2004) The Seven Basic Plots: Why We Tell Stories.

:::


## Twenty Story Types

::: flex

::: w-33

1. Quest
2. Adventure
3. Pursuit
4. Rescue
5. Escape
6. Revenge
7. The Riddle


:::

::: w-33

8. Rivalry
9. Underdog
10. Temptation
11. Metamorphosis
12. Transformation
13. Maturation
14. Love

:::


::: w-33


15. Forbidden Love
16. Sacrifice
17. Discovery
18. Wretched Excess
19. Ascension
20. Descension.

:::

:::

::: aside

Tobias, Ronald B. (1993) 20 Master Plots.

:::


# Basic Data Story Types {background-color="#006DAE"}


## Data Story Types

```{css, echo = FALSE}
.storytype {
  width: 23%;
}
```

<center>
<img src="images/drawn/storytype-time.png" class="storytype">
<img src="images/drawn/storytype-drilldown.png" class="storytype">
<img src="images/drawn/storytype-zoomout.png" class="storytype">
<img src="images/drawn/storytype-contrast.png" class="storytype">
<img src="images/drawn/storytype-factors.png" class="storytype">
<img src="images/drawn/storytype-intersections.png" class="storytype">
<img src="images/drawn/storytype-outliers.png" class="storytype">
</center>

::: aside

Jones, Ben (2015) [Seven Data Story Types.](https://dataremixed.com/2015/03/tapestry-2015-seven-data-story-types/) Tapestry Conference.

:::

## Data: key crop yields

```{r, echo = TRUE}
# devtools::install_github("etc5523-2022/data", ref = "tut9")
cwdata::key_crop_yields
```

. . . 

One data, many stories



## <img src="images/drawn/storytype-time-notext.png" style="height:1em;vertical-align:middle;"> Change over time

```{r plot-world-yield, fig.height = 4, fig.width = 8}
# devtools::install_github("etc5523-2022/data", ref = "tut9")
data <- cwdata::key_crop_yields
world_wheat <- data %>%
    filter(entity == "World", crop == "wheat")
region_wheat <- data %>%
    filter(
        crop == "wheat",
        entity %in% c(
            "Asia", "Asia, Central",
            "Central America", "Central African Republic",
            "Eastern Africa", "Eastern Asia",
            "Eastern Europe", "Northern Europe",
            "Europe, Western", "Middle Africa",
            "Oceania", "South Africa",
            "South America", "South Eastern Asia",
            "Southern Africa", "Southern Asia",
            "Southern Europe", "Western Africa", "Western Asia"
        )
    )
europe_wheat <- data %>%
    filter(
        crop == "wheat",
        entity %in% c(
            "Eastern Europe",
            "Northern Europe",
            "Europe, Western",
            "Southern Europe"
        )
    ) %>%
    mutate(entity = recode(entity,
        "Europe, Western" = "Western Europe"
    ))

slope <- coef(lm(yield ~ year, data = world_wheat))[2]

ggplot(world_wheat, aes(year, yield)) +
    geom_line(color = "#969696") +
    geom_smooth(
        method = lm, se = FALSE, size = 0.5,
        color = "#008A25"
    ) +
    labs(
        x = "Year",
        y = "Yield (t/ha)",
        title = "Total world wheat yield is increasing",
        caption = "Source: Our World in Data / Tidy Tuesday 2020-09-01"
    ) +
    annotate("text",
        label = paste(round(slope * 10, 2), "t/ha per decade"),
        x = 2010, y = 2.25, color = "#008A25"
    ) +
    annotate("segment",
        x = 2002, xend = 2002,
        y = 2, yend = 2.5,
        arrow = grid::arrow(), color = "#008A25"
    ) +
    theme(plot.caption = element_text(color = "#969696", size = 12))
```

## <img src="images/drawn/storytype-drilldown-notext.png" style="height:1em;vertical-align:middle;"> Drill down


```{r plot-europe-wheat, fig.height = 4, fig.width = 8}
europe_wheat %>%
    mutate(region = str_replace(entity, "ern Europe", "")) %>%
    ggplot(aes(year, yield, color = region)) +
    geom_line() +
    guides(color = "none") +
    geom_text(aes(label = region, x = 2019),
        data = ~ filter(.x, year == max(year)),
        hjust = 0
    ) +
    xlim(NA, 2021) +
    labs(
        x = "Year",
        y = "Yield (t/ha)",
        title = "Major wheat yield in Europe is in North and West",
        caption = "Source: Our World in Data / Tidy Tuesday 2020-09-01"
    ) +
    theme(plot.caption = element_text(color = "#969696", size = 12)) +
    colorspace::scale_color_discrete_qualitative()
```

## <img src="images/drawn/storytype-contrast-notext.png" style="height:1em;vertical-align:middle;"> Contrast

```{r plot-crop-type, fig.height = 3, fig.width = 6}
data %>%
    filter(
        entity == "Europe",
        year == max(year),
        !is.na(yield)
    ) %>%
    mutate(
        crop = tools::toTitleCase(crop),
        crop = fct_reorder(crop, yield),
        staple = crop %in% c("Potatoes", "Bananas")
    ) %>%
    ggplot(aes(yield, crop)) +
    geom_col(aes(fill = staple)) +
    scale_x_continuous(
        expand = c(0, 0),
        limits = c(0, 43.5)
    ) +
    scale_fill_manual(values = c("grey", "yellow2")) +
    guides(fill = "none") +
    labs(
        x = "Yield (t/ha)", y = "",
        title = "Bananas and potatoes are Europe's staple food, 2018",
        caption = "Source: Our World in Data / Tidy Tuesday 2020-09-01"
    ) +
    geom_text(aes(label = sprintf("%.1f", yield)),
        hjust = 0
    ) +
    theme(
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.caption = element_text(color = "#969696", size = 12)
    )
```

## <img src="images/drawn/storytype-factors-notext.png" style="height:1em;vertical-align:middle;"> Factors


```{r plot-factors, fig.height = 3, fig.width = 6}
data %>%
    filter(
        entity %in% c(
            "Eastern Europe",
            "Northern Europe",
            "Europe, Western",
            "Southern Europe"
        ),
        year == max(year),
        !is.na(yield)
    ) %>%
    mutate(
        entity = recode(entity,
            "Europe, Western" = "Western Europe"
        ),
        entity = str_replace(entity, "ern Europe", ""),
        crop = tools::toTitleCase(crop),
        crop = fct_reorder(crop, -yield, max),
        staple = crop %in% c("Potatoes", "Bananas")
    ) %>%
    ggplot(aes(yield, entity)) +
    geom_col(aes(fill = crop),
        position = "fill",
        color = "black"
    ) +
    scale_x_continuous(expand = c(0, 0)) +
    labs(
        x = "Proportion", y = "",
        fill = "",
        title = "Bananas are produced only in South Europe!",
        caption = "Source: Our World in Data / Tidy Tuesday 2020-09-01"
    ) +
    theme(
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 16),
        plot.caption = element_text(color = "#969696", size = 12),
        axis.title.x = element_text(size = 14),
        axis.text.x = element_text(size = 12),
        legend.text = element_text(size = 12)
    )
```


## <img src="images/drawn/storytype-intersections-notext.png" style="height:1em;vertical-align:middle;"> Intersections

```{r plot-intersections, fig.width = 7, fig.height = 3}
data %>%
    filter(
        entity %in% c("Europe"),
        !crop %in% c("potatoes", "bananas"),
        !is.na(yield)
    ) %>%
    arrange(crop, year) %>%
    mutate(
        crop = tools::toTitleCase(crop),
        crop = fct_reorder(crop, -yield, last)
    ) %>%
    ggplot(aes(year, yield, color = crop)) +
    geom_line() +
    colorspace::scale_color_discrete_qualitative() +
    labs(
        y = "Yield (t/ha)", x = "Year",
        title = "Maize became as popular as rice in Europe!",
        color = "",
        caption = "Source: Our World in Data / Tidy Tuesday 2020-09-01"
    ) +
    theme(plot.caption = element_text(color = "#969696", size = 12))

```




## <img src="images/drawn/storytype-outliers-notext.png" style="height:1em;vertical-align:middle;"> Outliers

::: center 

Kuwait, NZ & USA have highest potato yields, 2018

:::

```{r plot-outliers, fig.height = 5, fig.width = 4.3, out.width="35%"}
map_data("world") %>%
    mutate(
        region = recode(region,
            "UK" = "United Kingdom",
            "USA" = "United States",
            "Democratic Republic of the Congo" = "Democratic Republic of Congo"
        ),
        europe = str_detect(region, "[Ee]urope")
    ) %>%
    left_join(filter(data, crop == "potatoes", year == max(year)),
        by = c("region" = "entity")
    ) %>%
    group_by(region) %>%
    summarise(
        yield = mean(yield),
        crop = unique(crop)
    ) %>%
    ggplot(aes("1", yield)) +
    ggbeeswarm::geom_quasirandom() +
    ggrepel::geom_text_repel(aes(label = region),
        data = ~ filter(.x, yield > 45),
        force_pull = 3
    ) +
    labs(
        y = "Yield (t/ha)", x = "",
        color = "",
        caption = "Source: Our World in Data / Tidy Tuesday 2020-09-01"
    ) +
    theme(
        plot.caption = element_text(color = "#969696", size = 12),
        axis.title.x = element_blank(),
        axis.ticks.length.x = grid::unit(0, "mm")
    )
```


# Narrative structure {background-color="#006DAE"}


## Narrative structure

::: flex

::: w-50

<img src="images/fiveactstructure.png">

:::

::: w-50

<img src="images/thegap.svg">

:::


:::

::: aside

[Spencer (2022, Feb. 17). Data in Wonderland. Section 1.](https://ssp3nc3r.github.io/data_in_wonderland/#narrative)

:::

## Elements of statistical persuasion

* **Magnitude of effects**: the strength of a statistical argument is enhanced in accord with the quantitative magnitude of support for its qualitative claim.
* **Articulation of results**: the degree of comprehensible detail in which conclusions are phrased. 
* **Generality of effects**: the replicability of the results.
* **Interestingness of argument**: the potential to change people believe.
* **Credibility of argument**: the believability of a claim.

::: aside

[Spencer (2022, Feb. 17). Data in Wonderland. Section 1.](https://ssp3nc3r.github.io/data_in_wonderland/#narrative)

:::


## Narrative techniques 

* **Metaphor, simile, analogy or anecdotes**, e.g. "one in three households is wasting the equivalent of a shopping bag full of food each week."
* **Comparisons**, e.g. "While the average Australian man has $52,786 in their savings account right now, the average woman sits at around half that figure – $26,132."
* **Flow of information**, e.g. new information before old, simple before complex information. 


# Improving communication {background-color="#006DAE"}

## Feedback loops

* Recall [**there is no single, ideal way to communicate**]{.monash-blue}.
* Get in a habit to seek feedback from others about:
  - **Reach**: Did the audience even receive your message at all? Who did and who didn’t?
  - **Understanding**: Did  the  audience  interpret  the  data  message  in  the  way  you  intended?
  - **Impact**: Did the audience react in the way you wanted them to react?
  
::: aside 

Jones (2014) Communicating Data with Tableau

:::

## Anscombe's Quartet

::: flex

::: {.w-50 .f3}

```{r}
ans <- anscombe %>%
    mutate(n = 1:n()) %>%
    pivot_longer(-n) %>%
    mutate(
        set = parse_number(name),
        var = str_extract(name, ".")
    ) %>%
    pivot_wider(c(set, n),
        values_from = value,
        names_from = var
    ) %>%
    arrange(set, n)

knitr::kable(anscombe)
```

:::

::: {.w-50 .f3 .fragment}

Summary statistics

```{r}
ans %>%
    group_by(set) %>%
    summarise(
        cor = cor(x, y),
        sd_x = sd(x),
        sd_y = sd(y),
        mean_x = mean(x),
        mean_y = mean(y),
        intercept = coef(lm(y ~ x))[1],
        slope = coef(lm(y ~ x))[2]
    ) %>%
    knitr::kable(digits = 3)
```

::: fragment

... show hardly any differences between sets.

:::


:::

:::


## Anscombe's Quartet


```{r plot-anscombe}
ans %>%
    ggplot(aes(x, y)) +
    geom_point() +
    facet_wrap(~set)
```


## Same Stats, Different Graphs

```{r plot-dozen, fig.height = 3.5}
datasauRus::twelve_from_slant_long %>%
    ggplot(aes(x, y)) +
    geom_point(size = 0.5) +
    facet_wrap(~dataset) +
    theme(text = element_text(size = 12))
```



::: aside

Matejka, J., & Fitzmaurice, G. (2017). Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics through Simulated Annealing. CHI 2017 

:::

## Uncovering Simpson's paradox

```{r}
datasauRus::simpsons_paradox %>%
    ggplot(aes(x, y)) +
    geom_point() +
    geom_smooth(se = FALSE, method = lm) +
    facet_wrap(~dataset)
```

## Advantages of visualisation

- Ability to "see" large amounts of data
- Reveals properties or structures in data that are not apparent in numerical summaries
- Facilitates understanding of both large-scale and small-scale features of the data

## A model of visual information processing

<center>
<img src="images/vis-system.png" width="50%">
</center>

::: aside

Ware, Colin (2021) Information Visualisation: Perception for Design.

:::




## Visual encodings 

<center>
<img src="https://ssp3nc3r.github.io/data_in_wonderland/images/semiologyelements.png" width="50%">
</center>

::: aside 

Spencer (2022, Feb. 17). Data in Wonderland. 

:::

## Effectiveness of visual encoding 

<center>
<img src="https://ssp3nc3r.github.io/data_in_wonderland/index_files/figure-html5/encodings1-1.png" width="70%">
</center>

::: aside 

Spencer (2022, Feb. 17). Data in Wonderland. 

:::

## Effectiveness of visual encoding by data type

<center>
<img src="images/DVHB_VisualVariables_A3.png" width="68%">
</center>

::: aside 

Spencer (2022, Feb. 17). Data in Wonderland. 

:::

## Affectiveness by color

<center>
<img src="images/affective-colors.png" width="70%">
</center>

::: aside 

Bartram et al. (2017) Affective Color in Visualization. CHI Conference

:::

## User Interactions 

<img src="images/lecture-03/actions.svg">

::: {.f4 .absolute .bottom-0}

Image from Spencer (2022, Feb. 17). Data in Wonderland. Retrieved from https://ssp3nc3r.github.io/data_in_wonderland

:::

## User Inputs

<img src="images/lecture-03/widgets.svg">

::: {.f4 .absolute .bottom-0}

Image from Spencer (2022, Feb. 17). Data in Wonderland. Retrieved from https://ssp3nc3r.github.io/data_in_wonderland

:::

## Overview 

<center>
<img src="https://ssp3nc3r.github.io/data_in_wonderland/images/overview-schematic.svg" width="80%">
</center>

::: {.f4 .absolute .bottom-0}

Image from Spencer (2022, Feb. 17). Data in Wonderland. Retrieved from https://ssp3nc3r.github.io/data_in_wonderland

:::


# State of the art for<br>interactive plots {background-color="#006DAE"}

## Interactive plots with JS

* State-of-the-art for interactive plots is **JS**
* Some of the most popular and free JS library for plotting are:

::: flex

::: w-10

:::

::: w-30

  * [Chart.js](https://www.chartjs.org/)
  * [Dygraphs](https://dygraphs.com/)
  * [D3.js](https://d3js.org/)
 
:::

::: w-30

  * [ECharts](https://echarts.apache.org/en/index.html)
  * [Google Charts](https://developers.google.com/chart)
  * [Highcharts](https://www.highcharts.com/)
 
:::

::: w-30

   * [Plotly](https://plotly.com/javascript/)
   * [Vis.js](https://visjs.org/)
:::

:::


* Rising JS libraries that are based on the *Grammar of Graphics*:

::: flex

::: w-10

:::

::: w-45

   * [Observable Plot](https://observablehq.com/@observablehq/plot)
 
:::

::: w-45

   * [Vega and Vega-Lite](https://vega.github.io/vega/)

:::


:::


## Interactive plots with JS through R  {.scrollable}

* No need to learn JS!
* Many JS library for plotting are available via an R package:

| JS | R package |
| --- | --- |
| [Chart.js](https://www.chartjs.org/) | [`chartjs`](https://github.com/Tutuchan/chartjs),  [`charter`](https://github.com/JohnCoene/charter) |
| [Dygraphs](https://dygraphs.com/) | [`dygraphs`](https://github.com/rstudio/dygraphs) | 
| [D3.js](https://d3js.org/) | [`r2d3`](https://github.com/rstudio/r2d3), [`networkD3`](https://github.com/christophergandrud/networkD3) | 
| [ECharts](https://echarts.apache.org/en/index.html) | [`echarts4r`](https://github.com/JohnCoene/echarts4r)| 
| [Google Charts](https://developers.google.com/chart) | [`googleVis`](https://github.com/mages/googleVis) |
| [Highcharts](https://www.highcharts.com/) | [`highcharter`](https://github.com/jbkunst/highcharter) | 
| [Plotly](https://plotly.com/javascript/) | [`plotly`](https://github.com/plotly/plotly.R) | 
| [Vis.js](https://visjs.org/) | [`visNetwork`](https://github.com/datastorm-open/visNetwork) |
| [Observable Plot](https://observablehq.com/@observablehq/plot) | [`obsplot`](https://github.com/juba/obsplot) |
| [Vega and Vega-Lite](https://vega.github.io/vega/) | [`vegawidget`](https://github.com/vegawidget/vegawidget), [`altair`](https://github.com/vegawidget/altair),  [`virgo`](https://github.com/vegawidget/virgo),  [`vegabrite`](https://github.com/vegawidget/vegabrite) |


# Plotly {background-color="#006DAE"}

## Plotly

* Plotly is a high-level, declarative library for plotting build on `d3.js` and `stack.gl` (open software ecosystem for WebGL).

. . . 

```{r plot-plotly, eval = FALSE}
library(plotly)
plot_ly(ggplot2::diamonds, x = ~cut, color = ~clarity, colors = "Accent")
```

. . . 

```{r, echo = FALSE}
p <- plot_ly(ggplot2::diamonds, x = ~cut, color = ~clarity, colors = "Accent")
widgetframe::frameWidget(p, height = "450px")
```


## Plotly for ggplot2

. . . 

```{r plot-ggplot2, eval = FALSE, echo=TRUE}
#| code-line-numbers: "|1-4|6"
library(ggplot2)
g <- ggplot(ggplot2::diamonds, aes(x = cut, fill = clarity)) +
    geom_bar(position = "dodge") +
    scale_fill_brewer(palette = "Accent")

ggplotly(g)
```

. . . 

```{r, echo = FALSE}
library(ggplot2)
g <- ggplot(
    ggplot2::diamonds,
    aes(x = cut, fill = clarity)
) +
    geom_bar(position = "dodge") +
    scale_fill_brewer(palette = "Accent")

widgetframe::frameWidget(ggplotly(g), height = "450px")
```


## Plotly with drop down menu


```{r, echo = FALSE}

yields <- na.omit(cwdata::key_crop_yields)
crops <- sort(unique(yields$crop))

map(crops, ~ {
    yields %>%
        filter(crop == .x) %>%
        plot_ly(
            x = ~year,
            y = ~yield,
            type = "scatter",
            mode = "lines",
            color = ~crop,
            transforms = list(
                list(
                    type = "filter",
                    target = ~entity,
                    operation = "=",
                    value = "Afghanistan"
                )
            )
        )
}) %>%
    subplot(nrows = 3) %>%
    layout(
        showlegend = FALSE,
        annotations = imap(crops, ~ {
            list(
                x = 0 + 1 / 4 * (.y - 1) - 1 / 4 * 4 * (.y > 4) - 1 / 4 * 4 * (.y > 8),
                y = 1 - 0.05 - 1 / 3 * (.y > 4) - 1 / 3 * (.y > 8),
                font = list(size = 12),
                text = .x,
                xref = "paper",
                yref = "paper",
                xanchor = "center",
                yanchor = "bottom",
                showarrow = FALSE
            )
        }),
        updatemenus = list(list(
            type = "dropdown",
            active = 0,
            buttons = map(
                unique(yields$entity),
                ~ list(
                    method = "restyle",
                    args = list("transforms[0].value", .x),
                    label = .x
                )
            )
        ))
    )
```

## Code for Plotly with drop down menu

```{r, eval = FALSE, echo=TRUE}
#| code-line-numbers: "|1|2|4-22|5-6|7-19|23|24-51|26-38|39-50"
yields <- na.omit(cwdata::key_crop_yields)
crops <- sort(unique(yields$crop))

map(crops, ~ {
    yields %>%
        filter(crop == .x) %>%
        plot_ly(
            x = ~year,
            y = ~yield,
            type = "scatter",
            mode = "lines",
            color = ~crop,
            transforms = list(
                list(
                    type = "filter",
                    target = ~entity,
                    operation = "=",
                    value = "Afghanistan"
                )
            )
        )
}) %>%
    subplot(nrows = 3) %>%
    layout(
        showlegend = FALSE,
        annotations = imap(crops, ~ {
            list(
                x = 0 + 1 / 4 * (.y - 1) - 1 / 4 * 4 * (.y > 4) - 1 / 4 * 4 * (.y > 8),
                y = 1 - 0.05 - 1 / 3 * (.y > 4) - 1 / 3 * (.y > 8),
                font = list(size = 18),
                text = .x,
                xref = "paper",
                yref = "paper",
                xanchor = "center",
                yanchor = "bottom",
                showarrow = FALSE
            )
        }),
        updatemenus = list(list(
            type = "dropdown",
            active = 0,
            buttons = map(
                unique(yields$entity),
                ~ list(
                    method = "restyle",
                    args = list("transforms[0].value", .x),
                    label = .x
                )
            )
        ))
    )
```


## Difference to Shiny

`cwdata::run_app()` <a href="https://ebsmonash.shinyapps.io/global-crop-yields/"><i class="fas fa-link"></i></a>

<a href="https://ebsmonash.shinyapps.io/global-crop-yields/"><img src="images/cwdata-app.png"></a>


## Code for Shiny app

```{r, eval = FALSE, echo=TRUE}
#| code-line-numbers: "10-13|24-29|16"
library(shiny)
library(ggplot2)
library(dplyr)
library(cwdata)

ui <- fluidPage(
    br(),
    sidebarLayout(
        sidebarPanel(
            selectizeInput("entity",
                "Select a country or region:",
                choices = sort(unique(key_crop_yields$entity)),
                selected = "Australia"
            )
        ),
        mainPanel(
            plotOutput("tsplot")
        )
    )
)

server <- function(input, output, session) {
    output$tsplot <- renderPlot({
        key_crop_yields %>%
            filter(entity == input$entity) %>%
            ggplot(aes(year, yield)) +
            geom_line() +
            geom_point() +
            facet_wrap(~crop, scale = "free_y")
    })
}

shinyApp(ui, server)
```


## Week 10 Lesson 


::: callout-important

## Summary

* Storytelling is a powerful technique to communicate data
* Compose effective data stories requires you to 
  - know your the goals (audience, message, desired effect), 
  - selecting appropriate data, visualisations and aesthetic designs, and 
  - receiving feedback.


:::


::: callout-tip

## Resources

::: nonincremental

* [Spencer (2022, Feb. 17). Data in Wonderland. Section 1.](https://ssp3nc3r.github.io/data_in_wonderland/#narrative)
* Jones (2014) Communicating Data with Tableau

:::

:::